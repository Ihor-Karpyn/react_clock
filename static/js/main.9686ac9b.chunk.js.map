{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","st","men","groupsNumber","data","setData","preparedSchedule","setPreparedSchedule","inputsHandler","e","target","name","value","title","onChange","type","onClick","length","array","preparedStudents","prepareText","sort","Math","random","preparedMentors","schedule","Array","fill","map","group","index","groupIndex","i","push","el","join","style","width","height","str","split","ReactDOM","render","document","getElementById"],"mappings":"uMAGaA,G,MAAM,WACjB,MAAwBC,mBAAS,CAC/BC,GAAI,GACJC,IAAK,GACLC,aAAc,IAHhB,mBAAOC,EAAP,KAAaC,EAAb,KAKA,EAAgDL,mBAAS,IAAzD,mBAAOM,EAAP,KAAyBC,EAAzB,KAqCMC,EAAgB,SAACC,GACrB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdP,EAAQ,2BACHD,GADE,kBAEJO,EAAgB,iBAATA,GAA2BC,EAAQA,MAI/C,OACE,6BACE,8BAAUC,MAAM,YACd,4CACA,8BACED,MAAOR,EAAKH,GACZU,KAAK,KACLG,SAAUN,KAGd,8BAAUK,MAAM,WACd,2CACA,8BACEF,KAAK,MACLC,MAAOR,EAAKF,IACZY,SAAUN,KAGd,8BAAUK,MAAM,oBACd,oDACA,2BACEE,KAAK,SACLJ,KAAK,eACLC,MAAOR,EAAKD,aACZW,SAAUN,KAGd,4BACEO,KAAK,SACLC,QAzEW,WACf,IAAQf,EAA0BG,EAA1BH,GAAIC,EAAsBE,EAAtBF,IAAKC,EAAiBC,EAAjBD,aAEjB,GAAkB,IAAdF,EAAGgB,QAA+B,IAAff,EAAIe,QAAgBd,GAAgB,EACzD,OAAO,EAOT,IAJA,IA0Fae,EA1FPC,GA0FOD,EA1FoBE,EAAYnB,GA2FxC,YAAIiB,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,OA1FvCC,EAAkBJ,EAAYlB,GAC9BuB,EAAW,IAAIC,MAAMvB,GAAcwB,KAAK,IAErCH,EAAgBP,OAASE,EAAiBF,QAC/CO,EAAe,sBAAOA,GAAP,YAA2BA,IAG5CC,EAAWA,EAASG,KAAI,SAACC,EAAOC,GAAR,MACtB,CAAC,yDAAD,OAAkBN,EAAgBM,GAAlC,WAKF,IAFA,IAAIC,EAAa,EAERC,EAAI,EAAGA,EAAIb,EAAiBF,OAAQe,GAAK,EAC5CD,GAAcN,EAASR,SACzBc,EAAa,GAGfN,EAASM,GAAYE,KAAKd,EAAiBa,IAC3CD,GAAc,EAKhB,OAFAxB,EAAoBkB,EAASG,KAAI,SAAAM,GAAE,mBAAUA,EAAGC,KAAK,WAE9C,IAuCL,YAMA,kCACE,4CACA,8BACEC,MAAO,CACLC,MAAO,OACPC,OAAQ,SAEV1B,MAAON,EACPQ,SAAU,SAAAL,GAAC,OAAIF,EAAoBE,EAAEC,OAAOE,cAOtD,SAASQ,EAAYmB,GACnB,OAAOA,EAAIC,MAAM,MACdZ,KAAI,SAAAM,GAAE,iBAAQA,EAAGM,MAAM,KAAKL,KAAK,QCrGtCM,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.9686ac9b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\nexport const App = () => {\n  const [data, setData] = useState({\n    st: [],\n    men: [],\n    groupsNumber: 0,\n  });\n  const [preparedSchedule, setPreparedSchedule] = useState('');\n\n  const generate = () => {\n    const { st, men, groupsNumber } = data;\n\n    if (st.length === 0 || men.length === 0 || groupsNumber <= 1) {\n      return 0;\n    }\n\n    const preparedStudents = shuffle(prepareText(st));\n    let preparedMentors = prepareText(men);\n    let schedule = new Array(groupsNumber).fill([]);\n\n    while (preparedMentors.length < preparedStudents.length) {\n      preparedMentors = [...preparedMentors, ...preparedMentors];\n    }\n\n    schedule = schedule.map((group, index) => (\n      [`\\nО   проведе ${preparedMentors[index]} \\n`]\n    ));\n\n    let groupIndex = 0;\n\n    for (let i = 0; i < preparedStudents.length; i += 1) {\n      if (groupIndex >= schedule.length) {\n        groupIndex = 0;\n      }\n\n      schedule[groupIndex].push(preparedStudents[i]);\n      groupIndex += 1;\n    }\n\n    setPreparedSchedule(schedule.map(el => `\\n ${el.join('\\n')}`));\n\n    return 0;\n  };\n\n  const inputsHandler = (e) => {\n    const { name, value } = e.target;\n\n    setData({\n      ...data,\n      [name]: name === 'groupsNumber' ? +value : value,\n    });\n  };\n\n  return (\n    <div>\n      <fieldset title=\"students\">\n        <legend>students</legend>\n        <textarea\n          value={data.st}\n          name=\"st\"\n          onChange={inputsHandler}\n        />\n      </fieldset>\n      <fieldset title=\"mentors\">\n        <legend>mentors</legend>\n        <textarea\n          name=\"men\"\n          value={data.men}\n          onChange={inputsHandler}\n        />\n      </fieldset>\n      <fieldset title=\"number of groups\">\n        <legend>Number of groups</legend>\n        <input\n          type=\"number\"\n          name=\"groupsNumber\"\n          value={data.groupsNumber}\n          onChange={inputsHandler}\n        />\n      </fieldset>\n      <button\n        type=\"button\"\n        onClick={generate}\n      >\n        generate\n      </button>\n      <fieldset>\n        <legend>Schedule</legend>\n        <textarea\n          style={{\n            width: '100%',\n            height: '100vh',\n          }}\n          value={preparedSchedule}\n          onChange={e => setPreparedSchedule(e.target.value)}\n        />\n      </fieldset>\n    </div>\n  );\n};\n\nfunction prepareText(str) {\n  return str.split('\\n')\n    .map(el => `@${el.split(' ').join('')}`);\n}\n\nfunction shuffle(array) {\n  return [...array].sort(() => Math.random() - 0.5);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}